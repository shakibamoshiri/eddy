#!/bin/bash

################################################################################
# bash error handling
################################################################################
# bash strict mode
set -Eeuo pipefail
# debug mode
#  set -x

function __error_handing__(){
    local last_status_code=$1;
    local error_line_number=$2;
    echo 1>&2 "Error - exited with status $last_status_code at line $error_line_number";
    perl -slne 'if($.+5 >= $ln && $.-4 <= $ln){ $_="$. $_"; s/$ln/">" x length($ln)/eg; s/^\D+.*?$/\e[1;31m$&\e[0m/g;  print}' -- -ln=$error_line_number $0
}

last_error_line_number=-1;
function __debug_handing__(){
    # why > 1
    # because EXIT code line number is 1
    # so the last line number should be overwritten by EXIT trap function call
    if [[ $2 > 1 ]]; then
        last_error_line_number=$2
    fi
    local last_status_code=$1;
    local error_line_number=$2

    # We do not need any printing here, because EXIT trap will do that and the end
    # perl -slne 'if($.==$ln){ print "DEBUG $. $_"}' -- -ln=$error_line_number $0
}

function __exit_handing__(){
    perl -slne 'if($.+5 >= $ln && $.-4 <= $ln){ $_="$. $_"; s/$ln/">" x length($ln)/eg; s/^\D+.*?$/\e[1;33m$&\e[0m/g; print}' -- -ln=$last_error_line_number $0
}

trap  '__error_handing__ $? $LINENO' ERR

################################################################################
# Bash CLI template
# A more flexible CLI parser (way of parsing)
# 20XX (C) Shakiba Moshiri
# https://github.com/shakibamoshiri/bash-CLI-template
################################################################################

################################################################################
# an associative array for storing color and a function for colorizing
################################################################################
declare -A _colors_;
_colors_[ 'red' ]='\x1b[0;31m';
_colors_[ 'green' ]='\x1b[0;32m';
_colors_[ 'yellow' ]='\x1b[0;33m';
_colors_[ 'cyan' ]='\x1b[0;36m';
_colors_[ 'white' ]='\x1b[0;37m';
_colors_[ 'reset' ]='\x1b[0m';

function colorize(){
    if [[ ${_colors_[ $1 ]} ]]; then
        echo -e "${_colors_[ $1 ]}$2${_colors_[ 'reset' ]}";
    else
        echo 'wrong color name!';
    fi
}

function print_title(){
    echo $(colorize cyan "$@");
}

################################################################################
# variables;
################################################################################
declare -A _init;
_init['flag']=0;
_init['args']='';

declare -A _watch;
_watch['flag']=0;
_watch['args']='';

declare -A _reload;
_reload['flag']=0;
_reload['args']=0;

declare -A _count;
_count['flag']=0;

declare -A _install;
_install['flag']=0;

declare -A _event;
_event['flag']=0;
_event['args']='attrib';

readonly docker_compose_file='docker-compose.yml';
readonly eddy_yaml_name='eddy.yml';
readonly direvent_config_name='direvent.conf';
readonly this_cli_name='eddy';
request_mode=${request_mode:-'manual'}
project_root=${project_root:-"$PWD"};

################################################################################
# help functions
################################################################################
function _init_help(){
    printf "%-25s %s\n" "-i │ --init" "Initializing";
    printf "%-40s %s\n" "   ├── $(colorize 'cyan' 'env')" "environmental variables for ${this_cli_name}.env";
    printf "%-40s %s\n" "   ├── $(colorize 'cyan' 'yaml')" "yaml file for ${this_cli_name}.yml";
    printf "%-40s %s\n" "   ├── $(colorize 'cyan' 'conf')" "configuration file for direvent.conf";

    printf "%-40s %s\n" "   └── $(colorize 'cyan' 'apply')" "environment: into docker-compose.yml";
}

function _reload_help(){
    printf "%-25s %s\n" "-r │ --reload" "Services to reload";

    printf "%-40s %s\n" "   └── $(colorize 'yellow' '[S1...]')" "list of services to reload";
}

function _watch_help(){
    printf "%-25s %s\n" "-w │ --watch" "Watching";
    printf "%-40s %s\n" "   ├── $(colorize 'cyan' '')" "no option == no output mode";
    printf "%-40s %s\n" "   ├── $(colorize 'cyan' 'log')" "brief output";

    printf "%-40s %s\n" "   └── $(colorize 'cyan' 'debug')" "log more details";
}

function _event_help(){
    printf "%-25s %s\n" "-e │ --event" "Events to watch";
    printf "%-40s %s\n" "   ├── $(colorize 'cyan' 'create')" "when a file is created";
    printf "%-40s %s\n" "   ├── $(colorize 'cyan' 'delete')" "when a file is deleted";
    printf "%-40s %s\n" "   ├── $(colorize 'cyan' 'write')" "when a file is written to";
    printf "%-40s %s\n" "   ├── $(colorize 'cyan' 'change')" "when a file is modified";

    printf "%-40s %s\n" "   └── $(colorize 'cyan' 'attrib')" "when a file attribute has been changed (default)";
}

function _count_help(){
    printf "%-25s %s\n" "-c │ --count" "Count reloaded services";
}

function _install_help(){
    printf "%-25s %s\n" "   │ --install" "Install the script";
}

function _help(){
    printf "%-25s %s\n" "-h │ --help" "Print help";
    echo "$(_count_help)";
    echo "$(_install_help)";
    echo
    echo "$(_init_help)"
    echo
    echo "$(_event_help)";
    echo
    echo "$(_watch_help)";
    echo
    echo "$(_reload_help)";
    exit 0;
}

if [[ ${#} == 0 ]]; then
    _help;
fi


################################################################################
# parsing argument
################################################################################
mapfile -t ARGS < <( perl -lne 'print $& while /(?:(?! -)[\s\S])+/ig' <<< "$@");
if [[ ${#ARGS[@]} == 0 ]]; then
    _help;
fi

function _init_call(){
    for arg in ${_init['args']}; do
        case $arg in
            env )
                echo "Initialize environmental variables";
            ;;
            yaml )
                echo "Initialize yaml file";
            ;;
            conf )
                echo "Create direvent.conf file";
            ;;
            apply )
                echo "Add environmental variables to docker-compose.yml file";
            ;;
            * )
                echo "unknown --init $arg"
                exit 1;
            ;;
        esac
    done
}

function _watch_call(){
    for arg in ${_watch['args']}; do
        case $arg in
            log )
                echo "Start watching in log mode";
            ;;
            debug )
                echo "Start watching in debug mode";
            ;;
            * )
                echo "unknown --watch $arg"
                exit 1;
            ;;
        esac
    done
}

function _event_call(){
    _event['args']=$(perl -lpe 's/\s+/,/g' <<< ${_options_[@]:1});
}

for arg in "${ARGS[@]}"; do
    mapfile -t _options_ < <(tr ' ' '\n' <<< "$arg");

    case ${_options_[0]} in
        -i | --init )
            _init['flag']=1;
            _init['args']=${_options_[@]:1}
            _init_call;
        ;;
        -w | --watch )
            _watch['flag']=1;
            _watch['args']=${_options_[@]:1}
            _watch_call;
        ;;
        -e | --event )
            _event['flag']=1;
            _event['args']=${_options_[@]:1};
            _event_call;
        ;;
        -r | --reload )
            _reload['flag']=1;
            _reload['args']=${_options_[@]:1}
        ;;
        -c | --count )
            _count['flag']=1;
        ;;
        --install )
            _install['flag']=1;
        ;;
        -h | --help )
            _help;
        ;;
        * )
            echo "unknown options: ${_options_[0]}";
            exit 0;
        ;;
    esac
done

if [[ ${_install['flag']} == 1 ]]; then
    chmod a+x ./eddy;
    sudo install ./$this_cli_name -t /usr/local/bin/
    which $this_cli_name;
    exit $?;
fi

################################################################################
# logic
################################################################################
mapfile services < <(yq -o json  '.services | keys' ${project_root}/${docker_compose_file} | jq -r '.[]');

if [[ ${_init['flag']} == 1 ]]; then
    for arg in ${_init['args']}; do
        if [[ $arg == env ]]; then
            for service in ${services[*]}; do
                if grep '-' <<< $service; then
                    echo "$service contains - , which is not valid!";
                    echo 'please update your service: $service name';
                    exit 1;
                fi
            done

             if ! [[ -f eddy.env ]]; then
                for service in ${services[*]}; do
                    echo "${service}_last_reload=0"
                done > eddy.env
            else
                echo 'file eddy.env exists'
                echo 'rm -f eddy.env if you need to update'
                exit 0;
            fi
        fi
    done
fi

if [[ ${_init['flag']} == 1 ]]; then
    for arg in ${_init['args']}; do
        if [[ $arg == yaml ]]; then
            eddy_yaml_file='';
            eddy_yaml_file+=\
"kind: configuration
name: eddy
description: watch and reload docker-compose or any others

watch:";
            for service in ${services[*]}; do
                eddy_yaml_file+="
  ${service}:
    reload: yes
    file: ${service}.txt.conf.etc
    path: $PWD
    command: default
    counter: 0";
            done
            echo "$eddy_yaml_file" > $eddy_yaml_name;
            md5sum $eddy_yaml_name > ${eddy_yaml_name}.md5
            exit 0;
        fi
    done
fi


if [[ ${_init['flag']} == 1 ]]; then
    for arg in ${_init['args']}; do
        if [[ $arg == 'conf' ]]; then
            if md5sum -c ${eddy_yaml_name}.md5 > /dev/null 2>&1; then
                echo "Original $eddy_yaml_name file is a template";
                echo "Update it before creating $direvent_config_name file";
                exit 0;
            fi

            eddy_config_file=$(yq $eddy_yaml_name);
            direvent_config_file='';
            direvent_config_file+=\
"syslog {
    facility local0;
    tag "direvent";
    print-priority yes;
}
";
            for service in ${services[*]}; do
                mapfile -t eddy_service_data   < <(yq ".watch.${service}.reload, .watch.${service}.file, .watch.${service}.path, .watch.${service}.command" $eddy_yaml_name);

                # create an array to check the first name if it is a valid command or not 
                mapfile -t -d ' ' user_cmd <<< ${eddy_service_data[3]};
                # when it is == default, no need to check
                # default is: docker-compose, update user_cmd[0]
                user_cmd[0]=$(tr -d '\n' <<< ${user_cmd[0]});
                if [[ ${user_cmd[0]} == 'default' ]]; then
                    user_cmd[0]='docker-compose';
                fi

                # echo "command: ${user_cmd[0]}";
                if which ${user_cmd[0]} > /dev/null 2>&1; then
                    eddy_service_data[3]="$(which ${user_cmd[0]}) $(tr -d '\n' <<< ${user_cmd[@]:1})";
                else
                    echo "command: ${user_cmd[0]} not found in your \$PATH";
                    exit 1;
                fi
                direvent_config_file+="
watcher {
    path ${eddy_service_data[2]};
    file \"${eddy_service_data[1]}\";
    event (${_event['args']});
    command \"$0 --count --reload ${service}\";
    option (stdout, stderr, wait);
    environ {
        set \"request_mode=watch\";
        set \"project_root=$(pwd)\";
    }
}
";
            done
            echo "$direvent_config_file" > $direvent_config_name;
            exit 0;
        fi
    done
fi


if [[ ${_init['flag']} == 1 ]]; then
    for arg in ${_init['args']}; do
        if [[ $arg == 'apply' ]]; then
            for service in ${services[*]}; do
                # yq ".services.nginx.environment["name"]="${name}"" $docker_compose_file
                # yq '.services.'"${service}"'.environment["'"${service}_last_reload"'"]="'"\${${service}_last_reload}"'"' $docker_compose_file
                last_reload_exist=$(yq '.services.'"${service}"'.environment["'"${service}_last_reload"'"]' $docker_compose_file);
                echo -n "${service}_last_reload"
                if [[ $last_reload_exist == 'null' ]]; then
                    yq -i '.services.'"${service}"'.environment["'"${service}_last_reload"'"]="'"\${${service}_last_reload}"'"' $docker_compose_file;
                    echo ' is null, added'
                else
                    echo ' already set, skipped'
                fi
            done
            exit 0;
        fi
    done
fi

if [[ ${_watch['flag']} == 1 ]]; then
    case ${_watch['args']} in
        log )
            direvent -f ./$direvent_config_name
        ;;
        debug )
            direvent -d -f ./$direvent_config_name
        ;;
        * )
            echo "Start watching in no output mode";
            direvent -f ./$direvent_config_name > /dev/null 2>&1;
        ;;
    esac
fi


if [[ ${_reload['flag']} == 1 ]]; then
    command_mode='default';
    cd $project_root;
    for service in ${services[*]}; do
        for arg in ${_reload['args']}; do
            if [[ $arg == $service ]]; then
                if [[ $request_mode == 'watch' ]]; then
                    echo
                fi

                echo ">>> service: $service"
                command=$(yq ".watch.${service}.command" $eddy_yaml_name);
                if [[ $command == 'default' ]]; then
                    perl -i  -slpe 'BEGIN{$now=reverse localtime()};s/${sn}_last_reload=.*/"${sn}_last_reload=$now"/e' -- -sn=$service .env;
                    if [[ ${_count['flag']} == 1 ]]; then
                        counter=$(yq  ".watch.${service}.counter" $eddy_yaml_name);
                        counter=$((++counter));
                        yq -i  ".watch.${service}.counter=${counter}" $eddy_yaml_name;
                    fi
                    continue;
                else
                    command_mode='user_command';
                    echo ">>> command: $command"
                    eval "$command 2>&1";
                fi
            fi
        done
    done

    if [[ $command_mode == 'default' ]]; then
        echo ">>> command: docker-command -f $docker_compose_file up -d";
        docker-compose -f $docker_compose_file up -d 2>&1;
    fi
fi
